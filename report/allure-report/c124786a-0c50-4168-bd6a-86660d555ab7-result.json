{"name": "test_demo[test_dict10]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcase.test_post_feed.TestPostFeed object at 0x00000216FB170BE0>\nlogin = (60554, 'BZ0jbc_1dKxi9IUtoKdYLV7P36c8X-OM')\ntest_dict = {'case_id': 11, 'case_name': '删除日记', 'expected_1': 'res.status_code==200', 'expected_2': \"res.json()['result']==False\", ...}\n\n    @pytest.mark.parametrize('test_dict', test_post_feed_data)\n    def test_demo(self, login, test_dict):\n        # 如果测试字典里面的param不为空，即param里面有数据，这里我会认定为post请求，开始数据替换\n        if test_dict['param'] is not None:\n            # 如果找到userID，则替换\n            if test_dict['param'].find('${userID}') != -1:\n                new_param = test_dict['param'].replace('${userID}', str(login[0]))\n                test_dict['param'] = new_param\n            # 如果找到userKey，则替换\n            if test_dict['param'].find('${userKey}') != -1:\n                new_param = test_dict['param'].replace('${userKey}', \"'\" + str(login[1]) + \"'\")\n                test_dict['param'] = new_param\n            # 遍历全局变量的key值，如果在param里面找到了key字符串，则用globals()[key]替换，完成所有的替换\n            if globals().keys():\n                # 遍历key值\n                for key in globals().keys():\n                    # 遍历出来需要做处理，因为参数化里面是${key}这种格式\n                    key_str = '${' + key + '}'\n                    # 查找替换\n                    if test_dict['param'].find(key_str) != -1:\n                        new_param = test_dict['param'].replace(key_str, str(globals()[key]))\n                        test_dict['param'] = new_param\n        my_assertion = Assertion(test_dict, test_data_path)\n        res = my_assertion.send_request()\n        # 如果excel里面rely字段不为空，则添加到全局变量globals里面\n        if test_dict['rely'] is not None:\n            rely_list = eval(test_dict['rely'])\n            globals()[rely_list[0]] = rely_list[1]\n    \n>       my_assertion.assert_result(res)\n\ntestcase\\test_post_feed.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_assertion.py:48: in assert_result\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.base_assertion.Assertion object at 0x00000216FB277220>\nres = <Response [200]>\n\n    def assert_result(self, res):\n        test_result = 'UNKNOWN'\n        try:\n            # 断言成功则pass\n            assert res.status_code == 200\n            assert eval(self.test_dict['expected_1'])\n>           assert eval(self.test_dict['expected_2'])\nE           AssertionError\n\nbase\\base_assertion.py:40: AssertionError"}, "attachments": [{"name": "log", "source": "ebb9b351-48f2-4290-ab81-05f0753a44e6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_dict", "value": "{'case_id': 11, 'case_name': '删除日记', 'method': 'post', 'url': 'http://47.111.114.205:12800/api-usr/learningCircle/deleteFeed', 'headers': \"{'Content-Type':'application/json'}\", 'param': \"{'userID':${userID},'userKey':${userKey},'feedID':${feedID}}\", 'expected_1': 'res.status_code==200', 'expected_2': \"res.json()['result']==False\", 'response_body': \"{'result': True}\", 'result': 'FAIL', 'rely': None}"}], "start": 1646124427422, "stop": 1646124428266, "uuid": "422969b3-b479-4d51-9d66-3c547f0ac362", "historyId": "cc1c33d80d0a6b32e4dffc0c8ad1dad8", "testCaseId": "26e2dde317b3334568ee80a5ff83aacf", "fullName": "testcase.test_post_feed.TestPostFeed#test_demo", "labels": [{"name": "feature", "value": "日记测试"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_post_feed"}, {"name": "subSuite", "value": "TestPostFeed"}, {"name": "host", "value": "DESKTOP-3BND1OS"}, {"name": "thread", "value": "19352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_post_feed"}]}