{"name": "test_demo[test_dict10]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not Response", "trace": "self = <base.base_assertion.Assertion object at 0x000002A679D6AF40>\nres = <Response [200]>\n\n    def assert_result(self, res):\n        test_result = 'UNKNOWN'\n        try:\n            # 断言成功则pass\n            assert res.status_code == 200\n            assert eval(self.test_dict['expected_1'])\n>           assert eval(self.test_dict['expected_2'])\nE           AssertionError\n\nbase\\base_assertion.py:40: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_post_feed.TestPostFeed object at 0x000002A679C6C100>\nlogin = (60646, 'XucCQzP3t2YNny6_zDHixc4LS9LoLu4W')\ntest_dict = {'case_id': 11, 'case_name': '删除日记', 'expected_1': 'res.status_code==200', 'expected_2': \"res.json()['result']==False\", ...}\n\n    @pytest.mark.parametrize('test_dict', test_post_feed_data)\n    def test_demo(self, login, test_dict):\n        # 如果测试字典里面的param不为空，即param里面有数据，这里我会认定为post请求，开始数据替换\n        if test_dict['param'] is not None:\n            # 如果找到userID，则替换\n            if test_dict['param'].find('${userID}') != -1:\n                new_param = test_dict['param'].replace('${userID}', str(login[0]))\n                test_dict['param'] = new_param\n            # 如果找到userKey，则替换\n            if test_dict['param'].find('${userKey}') != -1:\n                new_param = test_dict['param'].replace('${userKey}', \"'\" + str(login[1]) + \"'\")\n                test_dict['param'] = new_param\n            # 遍历全局变量的key值，如果在param里面找到了key字符串，则用globals()[key]替换，完成所有的替换\n            if globals().keys():\n                # 遍历key值\n                for key in globals().keys():\n                    # 遍历出来需要做处理，因为参数化里面是${key}这种格式\n                    key_str = '${' + key + '}'\n                    # 查找替换\n                    if test_dict['param'].find(key_str) != -1:\n                        new_param = test_dict['param'].replace(key_str, str(globals()[key]))\n                        test_dict['param'] = new_param\n        my_assertion = Assertion(test_dict, test_data_path)\n        res = my_assertion.send_request()\n        # 如果excel里面rely字段不为空，则添加到全局变量globals里面\n        if test_dict['rely'] is not None:\n            rely_list = eval(test_dict['rely'])\n            globals()[rely_list[0]] = rely_list[1]\n    \n>       my_assertion.assert_result(res)\n\ntestcase\\test_post_feed.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_assertion.py:46: in assert_result\n    Log().warning('预期结果是：{0}；实际请求结果是:{1}'.format(self.test_dict[\"expected_2\"], str(get_response_body(\nbase\\base_assertion.py:17: in get_response_body\n    return json.loads(text) if is_json(text) else text\nbase\\base_assertion.py:9: in is_json\n    json_object = json.loads(my_json)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = <Response [200]>, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not Response\n\nD:\\Python3.9.10\\lib\\json\\__init__.py:339: TypeError"}, "attachments": [{"name": "log", "source": "61d0da39-02dd-4d6d-9436-138d104f4308-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_dict", "value": "{'case_id': 11, 'case_name': '删除日记', 'method': 'post', 'url': 'http://47.111.114.205:12800/api-usr/learningCircle/deleteFeed', 'headers': \"{'Content-Type':'application/json'}\", 'param': \"{'userID':${userID},'userKey':${userKey},'feedID':${feedID}}\", 'expected_1': 'res.status_code==200', 'expected_2': \"res.json()['result']==False\", 'response_body': \"{'result': False, 'errorMsg': '该日志不存在或已被删除'}\", 'result': 'FAIL', 'rely': None}"}], "start": 1645847685077, "stop": 1645847685900, "uuid": "226604d9-11fe-402d-863a-df5ebf9fc7bf", "historyId": "cc1c33d80d0a6b32e4dffc0c8ad1dad8", "testCaseId": "26e2dde317b3334568ee80a5ff83aacf", "fullName": "testcase.test_post_feed.TestPostFeed#test_demo", "labels": [{"name": "feature", "value": "日记测试"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_post_feed"}, {"name": "subSuite", "value": "TestPostFeed"}, {"name": "host", "value": "DESKTOP-3BND1OS"}, {"name": "thread", "value": "17920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_post_feed"}]}